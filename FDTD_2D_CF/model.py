import sys; sys.setdlopenflags(0x00100|sys.getdlopenflags())
# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_model', [dirname(__file__)])
        except ImportError:
            import _model
            return _model
        if fp is not None:
            try:
                _mod = imp.load_module('_model', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _model = swig_import_helper()
    del swig_import_helper
else:
    import _model
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _setstate( self, state ):
    if not hasattr( self, 'this' ) : self.__init__()
    self.__C_setstate__(state)
def import_aivlib(tgt) :
    name = tgt.split('-')[0]
    try : exec('import aivlib.'+name)
    except ImportError, e : import os; os.system('make-aivlib %r'%tgt); exec('import aivlib.'+name)
    return eval('aivlib.'+name)
def _swig_setattr(self,class_type,name,value):
    if name in class_type.__swig_setmethods__ : value = getattr( self, name ).__class__(value)
    return _swig_setattr_nondynamic(self,class_type,name,value,0)
__makefile__='model.mk'

class aiv_convert_for_compare_float(_object):
    """Proxy of C++ std::aiv_convert_for_compare_float class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aiv_convert_for_compare_float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aiv_convert_for_compare_float, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flt"] = _model.aiv_convert_for_compare_float_flt_set
    __swig_getmethods__["flt"] = _model.aiv_convert_for_compare_float_flt_get
    if _newclass:flt = _swig_property(_model.aiv_convert_for_compare_float_flt_get, _model.aiv_convert_for_compare_float_flt_set)
    __swig_setmethods__["fix"] = _model.aiv_convert_for_compare_float_fix_set
    __swig_getmethods__["fix"] = _model.aiv_convert_for_compare_float_fix_get
    if _newclass:fix = _swig_property(_model.aiv_convert_for_compare_float_fix_get, _model.aiv_convert_for_compare_float_fix_set)
    def __init__(self): 
        """__init__(std::aiv_convert_for_compare_float self) -> aiv_convert_for_compare_float"""
        this = _model.new_aiv_convert_for_compare_float()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model.delete_aiv_convert_for_compare_float
    __del__ = lambda self : None;
aiv_convert_for_compare_float_swigregister = _model.aiv_convert_for_compare_float_swigregister
aiv_convert_for_compare_float_swigregister(aiv_convert_for_compare_float)

class _base_mem(_object):
    """Proxy of C++ aiv::_base_mem class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _base_mem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _base_mem, name)
    __repr__ = _swig_repr
    __swig_getmethods__["D"] = _model._base_mem_D_get
    if _newclass:D = _swig_property(_model._base_mem_D_get)
    __swig_getmethods__["szT"] = _model._base_mem_szT_get
    if _newclass:szT = _swig_property(_model._base_mem_szT_get)
    __swig_setmethods__["N"] = _model._base_mem_N_set
    __swig_getmethods__["N"] = _model._base_mem_N_get
    if _newclass:N = _swig_property(_model._base_mem_N_get, _model._base_mem_N_set)
    __swig_setmethods__["owners"] = _model._base_mem_owners_set
    __swig_getmethods__["owners"] = _model._base_mem_owners_get
    if _newclass:owners = _swig_property(_model._base_mem_owners_get, _model._base_mem_owners_set)
    def __init__(self, *args): 
        """__init__(aiv::_base_mem self, int AszT, int AD, int * AN) -> _base_mem"""
        this = _model.new__base_mem(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model.delete__base_mem
    __del__ = lambda self : None;
    def len(self):
        """len(_base_mem self) -> size_t"""
        return _model._base_mem_len(self)

_base_mem_swigregister = _model._base_mem_swigregister
_base_mem_swigregister(_base_mem)

class arr_head(_object):
    """Proxy of C++ aiv::arr_head class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, arr_head, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, arr_head, name)
    __repr__ = _swig_repr
    __swig_getmethods__["D"] = _model.arr_head_D_get
    if _newclass:D = _swig_property(_model.arr_head_D_get)
    __swig_getmethods__["szT"] = _model.arr_head_szT_get
    if _newclass:szT = _swig_property(_model.arr_head_szT_get)
    __swig_getmethods__["N"] = _model.arr_head_N_get
    if _newclass:N = _swig_property(_model.arr_head_N_get)
    def load(self, *args):
        """load(arr_head self, aiv::Istream & S)"""
        return _model.arr_head_load(self, *args)

    def __init__(self, *args): 
        """
        __init__(aiv::arr_head self) -> arr_head
        __init__(aiv::arr_head self, aiv::Istream & S) -> arr_head
        __init__(aiv::arr_head self, arr_head H) -> arr_head
        """
        this = _model.new_arr_head(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model.delete_arr_head
    __del__ = lambda self : None;
arr_head_swigregister = _model.arr_head_swigregister
arr_head_swigregister(arr_head)

class lrc_head(_object):
    """Proxy of C++ aiv::lrc_head class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lrc_head, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lrc_head, name)
    __repr__ = _swig_repr
    __swig_getmethods__["D"] = _model.lrc_head_D_get
    if _newclass:D = _swig_property(_model.lrc_head_D_get)
    __swig_getmethods__["D2"] = _model.lrc_head_D2_get
    if _newclass:D2 = _swig_property(_model.lrc_head_D2_get)
    __swig_getmethods__["szT"] = _model.lrc_head_szT_get
    if _newclass:szT = _swig_property(_model.lrc_head_szT_get)
    __swig_getmethods__["R"] = _model.lrc_head_R_get
    if _newclass:R = _swig_property(_model.lrc_head_R_get)
    __swig_getmethods__["N"] = _model.lrc_head_N_get
    if _newclass:N = _swig_property(_model.lrc_head_N_get)
    __swig_destroy__ = _model.delete_lrc_head
    __del__ = lambda self : None;
    def load(self, *args):
        """load(lrc_head self, aiv::Istream & S)"""
        return _model.lrc_head_load(self, *args)

    def __init__(self, *args): 
        """
        __init__(aiv::lrc_head self) -> lrc_head
        __init__(aiv::lrc_head self, aiv::Istream & S) -> lrc_head
        __init__(aiv::lrc_head self, lrc_head H) -> lrc_head
        """
        this = _model.new_lrc_head(*args)
        try: self.this.append(this)
        except: self.this = this
lrc_head_swigregister = _model.lrc_head_swigregister
lrc_head_swigregister(lrc_head)

class base_sphere(_object):
    """Proxy of C++ aiv::base_sphere class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, base_sphere, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, base_sphere, name)
    __repr__ = _swig_repr
    __swig_getmethods__["R"] = _model.base_sphere_R_get
    if _newclass:R = _swig_property(_model.base_sphere_R_get)
    __swig_getmethods__["N"] = _model.base_sphere_N_get
    if _newclass:N = _swig_property(_model.base_sphere_N_get)
    def get_ref_count(self):
        """get_ref_count(base_sphere self) -> int"""
        return _model.base_sphere_get_ref_count(self)

    def __init__(self, *args): 
        """
        __init__(aiv::base_sphere self, int AR=-1) -> base_sphere
        __init__(aiv::base_sphere self) -> base_sphere
        __init__(aiv::base_sphere self, base_sphere S) -> base_sphere
        """
        this = _model.new_base_sphere(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model.delete_base_sphere
    __del__ = lambda self : None;
    def init(self, *args):
        """init(base_sphere self, int AR)"""
        return _model.base_sphere_init(self, *args)

    def get_cell_id(self, *args):
        """get_cell_id(base_sphere self, aiv::vctr< 3,double > const & r) -> int"""
        return _model.base_sphere_get_cell_id(self, *args)

    def get_cell_vertex(self, *args):
        """get_cell_vertex(base_sphere self, int cid) -> aiv::indx< 3 > const &"""
        return _model.base_sphere_get_cell_vertex(self, *args)

    def get_vertex(self, *args):
        """get_vertex(base_sphere self, int vid) -> aiv::vctr< 3,double > const &"""
        return _model.base_sphere_get_vertex(self, *args)

    def get_cell_neighbours(self, *args):
        """get_cell_neighbours(base_sphere self, int cid) -> aiv::indx< 3 > const &"""
        return _model.base_sphere_get_cell_neighbours(self, *args)

    def get_vertex_cells(self, *args):
        """get_vertex_cells(base_sphere self, int vid) -> aiv::indx< 6 > const &"""
        return _model.base_sphere_get_vertex_cells(self, *args)

    def get_cell_area(self, *args):
        """get_cell_area(base_sphere self, int cid) -> double"""
        return _model.base_sphere_get_cell_area(self, *args)

    def get_coord(self, *args):
        """get_coord(base_sphere self, aiv::vctr< 3,double > * x, long i, int AR)"""
        return _model.base_sphere_get_coord(self, *args)

    def get_nb(self, *args):
        """get_nb(base_sphere self, long * nb, long i, int AR)"""
        return _model.base_sphere_get_nb(self, *args)

    def get_cell_center(self, *args):
        """
        get_cell_center(base_sphere self, int cid) -> aiv::vctr< 3,double > const
        get_cell_center(base_sphere self, long cid, int AR) -> aiv::vctr< 3,double >
        """
        return _model.base_sphere_get_cell_center(self, *args)

base_sphere_swigregister = _model.base_sphere_swigregister
base_sphere_swigregister(base_sphere)
cvar = _model.cvar
MAX_RANK = cvar.MAX_RANK


def barecentr(*args):
  """barecentr(aiv::vctr< 3,double > const & x, aiv::vctr< 3,double > const [3] r) -> aiv::vctr< 3,double >"""
  return _model.barecentr(*args)
class cell(_object):
    """Proxy of C++ cell class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cell, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Ey"] = _model.cell_Ey_set
    __swig_getmethods__["Ey"] = _model.cell_Ey_get
    if _newclass:Ey = _swig_property(_model.cell_Ey_get, _model.cell_Ey_set)
    __swig_setmethods__["Bx"] = _model.cell_Bx_set
    __swig_getmethods__["Bx"] = _model.cell_Bx_get
    if _newclass:Bx = _swig_property(_model.cell_Bx_get, _model.cell_Bx_set)
    __swig_setmethods__["Bz"] = _model.cell_Bz_set
    __swig_getmethods__["Bz"] = _model.cell_Bz_get
    if _newclass:Bz = _swig_property(_model.cell_Bz_get, _model.cell_Bz_set)
    def __init__(self): 
        """__init__(cell self) -> cell"""
        this = _model.new_cell()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model.delete_cell
    __del__ = lambda self : None;
cell_swigregister = _model.cell_swigregister
cell_swigregister(cell)

class Model(_object):
    """Proxy of C++ Model class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Model, name)
    __repr__ = _swig_repr
    __swig_setmethods__["A"] = _model.Model_A_set
    __swig_getmethods__["A"] = _model.Model_A_get
    if _newclass:A = _swig_property(_model.Model_A_get, _model.Model_A_set)
    __swig_setmethods__["epsilon"] = _model.Model_epsilon_set
    __swig_getmethods__["epsilon"] = _model.Model_epsilon_get
    if _newclass:epsilon = _swig_property(_model.Model_epsilon_get, _model.Model_epsilon_set)
    __swig_setmethods__["Omega"] = _model.Model_Omega_set
    __swig_getmethods__["Omega"] = _model.Model_Omega_get
    if _newclass:Omega = _swig_property(_model.Model_Omega_get, _model.Model_Omega_set)
    __swig_setmethods__["mu"] = _model.Model_mu_set
    __swig_getmethods__["mu"] = _model.Model_mu_get
    if _newclass:mu = _swig_property(_model.Model_mu_get, _model.Model_mu_set)
    __swig_setmethods__["dz"] = _model.Model_dz_set
    __swig_getmethods__["dz"] = _model.Model_dz_get
    if _newclass:dz = _swig_property(_model.Model_dz_get, _model.Model_dz_set)
    __swig_setmethods__["dx"] = _model.Model_dx_set
    __swig_getmethods__["dx"] = _model.Model_dx_get
    if _newclass:dx = _swig_property(_model.Model_dx_get, _model.Model_dx_set)
    __swig_setmethods__["time"] = _model.Model_time_set
    __swig_getmethods__["time"] = _model.Model_time_get
    if _newclass:time = _swig_property(_model.Model_time_get, _model.Model_time_set)
    __swig_setmethods__["Y"] = _model.Model_Y_set
    __swig_getmethods__["Y"] = _model.Model_Y_get
    if _newclass:Y = _swig_property(_model.Model_Y_get, _model.Model_Y_set)
    __swig_setmethods__["h"] = _model.Model_h_set
    __swig_getmethods__["h"] = _model.Model_h_get
    if _newclass:h = _swig_property(_model.Model_h_get, _model.Model_h_set)
    __swig_setmethods__["data"] = _model.Model_data_set
    __swig_getmethods__["data"] = _model.Model_data_get
    if _newclass:data = _swig_property(_model.Model_data_get, _model.Model_data_set)
    def start(self, *args):
        """start(Model self, aiv::indx< 2 > offset)"""
        return _model.Model_start(self, *args)

    def calc_cone_1(self, *args):
        """calc_cone_1(Model self, double init_time, aiv::indx< 2 > offset)"""
        return _model.Model_calc_cone_1(self, *args)

    def calc_cone_0(self, *args):
        """calc_cone_0(Model self, double init_time, aiv::indx< 2 > offset)"""
        return _model.Model_calc_cone_0(self, *args)

    def __init__(self): 
        """__init__(Model self) -> Model"""
        this = _model.new_Model()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _model.delete_Model
    __del__ = lambda self : None;
Model_swigregister = _model.Model_swigregister
Model_swigregister(Model)

class indx1(_object):
    """Proxy of C++ aiv::indx<(1)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, indx1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, indx1, name)
    def volume(self):
        """volume(indx1 self) -> long"""
        return _model.indx1_volume(self)

    def __lt__(self, *args):
        """
        __lt__(indx1 self, indx1 r) -> bool
        __lt__(indx1 self, PyObject * t) -> bool
        __lt__(indx1 self, long i) -> bool
        """
        return _model.indx1___lt__(self, *args)

    def __le__(self, *args):
        """
        __le__(indx1 self, indx1 r) -> bool
        __le__(indx1 self, PyObject * t) -> bool
        __le__(indx1 self, long i) -> bool
        """
        return _model.indx1___le__(self, *args)

    def __gt__(self, *args):
        """
        __gt__(indx1 self, indx1 r) -> bool
        __gt__(indx1 self, PyObject * t) -> bool
        __gt__(indx1 self, long i) -> bool
        """
        return _model.indx1___gt__(self, *args)

    def __ge__(self, *args):
        """
        __ge__(indx1 self, indx1 r) -> bool
        __ge__(indx1 self, PyObject * t) -> bool
        __ge__(indx1 self, long i) -> bool
        """
        return _model.indx1___ge__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(indx1 self, indx1 r) -> bool
        __eq__(indx1 self, PyObject * t) -> bool
        __eq__(indx1 self, long i) -> bool
        """
        return _model.indx1___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(indx1 self, indx1 r) -> bool
        __ne__(indx1 self, PyObject * t) -> bool
        __ne__(indx1 self, long i) -> bool
        """
        return _model.indx1___ne__(self, *args)

    def __add__(self, *args):
        """
        __add__(indx1 self, indx1 r) -> indx1
        __add__(indx1 self, PyObject * t) -> indx1
        """
        return _model.indx1___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(indx1 self, indx1 r) -> indx1
        __sub__(indx1 self, PyObject * t) -> indx1
        """
        return _model.indx1___sub__(self, *args)

    def __xor__(self, *args):
        """
        __xor__(indx1 self, indx1 r) -> indx1
        __xor__(indx1 self, PyObject * t) -> indx1
        """
        return _model.indx1___xor__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(indx1 self, indx1 r) -> long
        __mul__(indx1 self, int j) -> indx1
        """
        return _model.indx1___mul__(self, *args)

    def __imul__(self, *args):
        """__imul__(indx1 self, int j) -> indx1"""
        return _model.indx1___imul__(self, *args)

    def __neg__(self):
        """__neg__(indx1 self) -> indx1"""
        return _model.indx1___neg__(self)

    def __ixor__(self, *args):
        """
        __ixor__(indx1 self, indx1 r) -> indx1
        __ixor__(indx1 self, PyObject * t) -> indx1
        """
        return _model.indx1___ixor__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(indx1 self, indx1 r) -> indx1
        __iadd__(indx1 self, PyObject * t) -> indx1
        """
        return _model.indx1___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(indx1 self, indx1 r) -> indx1
        __isub__(indx1 self, PyObject * t) -> indx1
        """
        return _model.indx1___isub__(self, *args)

    def __lshift__(self, *args):
        """
        __lshift__(indx1 self, indx1 b) -> indx1
        __lshift__(indx1 self, PyObject * t) -> indx1
        """
        return _model.indx1___lshift__(self, *args)

    def __rshift__(self, *args):
        """
        __rshift__(indx1 self, indx1 b) -> indx1
        __rshift__(indx1 self, PyObject * t) -> indx1
        """
        return _model.indx1___rshift__(self, *args)

    def __ilshift__(self, *args):
        """
        __ilshift__(indx1 self, indx1 b) -> indx1
        __ilshift__(indx1 self, PyObject * t) -> indx1
        """
        return _model.indx1___ilshift__(self, *args)

    def __irshift__(self, *args):
        """
        __irshift__(indx1 self, indx1 b) -> indx1
        __irshift__(indx1 self, PyObject * t) -> indx1
        """
        return _model.indx1___irshift__(self, *args)

    def __mod__(self, *args):
        """
        __mod__(indx1 self, indx1 b) -> indx1
        __mod__(indx1 self, PyObject * t) -> indx1
        """
        return _model.indx1___mod__(self, *args)

    def __imod__(self, *args):
        """
        __imod__(indx1 self, indx1 b) -> indx1
        __imod__(indx1 self, PyObject * t) -> indx1
        """
        return _model.indx1___imod__(self, *args)

    def __rmod__(self, *args):
        """__rmod__(indx1 self, long x) -> indx1"""
        return _model.indx1___rmod__(self, *args)

    def __div__(self, *args):
        """
        __div__(indx1 self, indx1 b) -> indx1
        __div__(indx1 self, PyObject * t) -> indx1
        __div__(indx1 self, int x) -> indx1
        """
        return _model.indx1___div__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(indx1 self, indx1 b) -> indx1
        __idiv__(indx1 self, PyObject * t) -> indx1
        __idiv__(indx1 self, int x) -> indx1
        """
        return _model.indx1___idiv__(self, *args)

    def circ(self, *args):
        """circ(indx1 self, int l) -> indx1"""
        return _model.indx1_circ(self, *args)

    def c_str(self, separator=" ", format="%i"):
        """
        c_str(indx1 self, char const * separator=" ", char const * format="%i") -> char const
        c_str(indx1 self, char const * separator=" ") -> char const
        c_str(indx1 self) -> char const *
        """
        return _model.indx1_c_str(self, separator, format)

    def __contains__(self, *args):
        """__contains__(indx1 self, indx1 I) -> bool"""
        return _model.indx1___contains__(self, *args)

    def __rmul__(self, *args):
        """__rmul__(indx1 self, int x) -> indx1"""
        return _model.indx1___rmul__(self, *args)

    def __len__(self):
        """__len__(indx1 self) -> int const"""
        return _model.indx1___len__(self)

    def __int__(self):
        """__int__(indx1 self) -> long"""
        return _model.indx1___int__(self)

    def __getitem__(self, *args):
        """__getitem__(indx1 self, int i) -> int"""
        return _model.indx1___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(indx1 self, int i, int x)"""
        return _model.indx1___setitem__(self, *args)

    def __getslice__(self, *args):
        """__getslice__(indx1 self, long a, long b) -> PyObject *"""
        return _model.indx1___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(indx1 self, long a, long b, PyObject * t)"""
        return _model.indx1___setslice__(self, *args)

    def __str__(self):
        """__str__(indx1 self) -> PyObject *"""
        return _model.indx1___str__(self)

    def __repr__(self):
        """__repr__(indx1 self) -> PyObject *"""
        return _model.indx1___repr__(self)

    def __getstate__(self):
        """__getstate__(indx1 self) -> PyObject *"""
        return _model.indx1___getstate__(self)

    def __C_setstate__(self, *args):
        """__C_setstate__(indx1 self, PyObject * t)"""
        return _model.indx1___C_setstate__(self, *args)

    def __init__(self, *args): 
        """
        __init__(aiv::indx<(1)> self, int val=0) -> indx1
        __init__(aiv::indx<(1)> self) -> indx1
        __init__(aiv::indx<(1)> self, int const * Ap) -> indx1
        __init__(aiv::indx<(1)> self, PyObject * t) -> indx1
        """
        this = _model.new_indx1(*args)
        try: self.this.append(this)
        except: self.this = this
    def __hash__(self):
        """__hash__(indx1 self) -> long"""
        return _model.indx1___hash__(self)

    def py_debug_info(self, *args):
        """py_debug_info(indx1 self, aiv::debug_info & S)"""
        return _model.indx1_py_debug_info(self, *args)

    def less(self, *args):
        """
        less(indx1 self, indx1 N) -> bool
        less(indx1 self, indx1 N, int const seq) -> bool
        """
        return _model.indx1_less(self, *args)

    def next(self, *args):
        """
        next(indx1 self, indx1 finish) -> bool
        next(indx1 self, indx1 start, indx1 finish) -> bool
        next(indx1 self, indx1 start, indx1 finish, int const seq, int const direct=0) -> bool
        next(indx1 self, indx1 start, indx1 finish, int const seq) -> bool
        next(indx1 self, indx1 finish, int const seq, int const direct=0) -> bool
        next(indx1 self, indx1 finish, int const seq) -> bool
        """
        return _model.indx1_next(self, *args)

    def z_next(self, *args):
        """
        z_next(indx1 self, int const rank) -> bool
        z_next(indx1 self, int const rank, int const seq) -> bool
        """
        return _model.indx1_z_next(self, *args)

    __swig_destroy__ = _model.delete_indx1
    __del__ = lambda self : None;
indx1_swigregister = _model.indx1_swigregister
indx1_swigregister(indx1)

def Indx( *L ) : v = getattr( import_aivlib( 'indx%i'%len(L) ), 'indx%i'%len(L) )(); v[:] = tuple(L); return v
indx1.__rcmp__=lambda a,b : -b.__cmp__(a) 
def _indx1__xor__( a,b ) :  
  try : return Indx(*map( int.__mul__, tuple(a),tuple(b) ) )  
  except : return  Indx(*(tuple(a)[:b]+tuple(a)[b+1:]))
indx1.__xor__ = _indx1__xor__ 
indx1.__or__ =lambda a,b : Indx(*(tuple(a)+tuple(((b,),b)[b.__class__.__name__.startswith('indx')])))  
indx1.__ror__=lambda a,b : Indx(*(tuple(((b,),b)[b.__class__.__name__.startswith('indx')])+tuple(a)))  
indx1.__setstate__ = _setstate 

class vctr1(_object):
    """Proxy of C++ aiv::vctr<(1,double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vctr1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vctr1, name)
    def __lt__(self, *args):
        """
        __lt__(vctr1 self, vctr1 r) -> bool
        __lt__(vctr1 self, PyObject * t) -> bool
        """
        return _model.vctr1___lt__(self, *args)

    def __le__(self, *args):
        """
        __le__(vctr1 self, vctr1 r) -> bool
        __le__(vctr1 self, PyObject * t) -> bool
        """
        return _model.vctr1___le__(self, *args)

    def __gt__(self, *args):
        """
        __gt__(vctr1 self, vctr1 r) -> bool
        __gt__(vctr1 self, PyObject * t) -> bool
        """
        return _model.vctr1___gt__(self, *args)

    def __ge__(self, *args):
        """
        __ge__(vctr1 self, vctr1 r) -> bool
        __ge__(vctr1 self, PyObject * t) -> bool
        """
        return _model.vctr1___ge__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(vctr1 self, vctr1 r) -> bool
        __eq__(vctr1 self, PyObject * t) -> bool
        """
        return _model.vctr1___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(vctr1 self, vctr1 r) -> bool
        __ne__(vctr1 self, PyObject * t) -> bool
        """
        return _model.vctr1___ne__(self, *args)

    def __and__(self, *args):
        """
        __and__(vctr1 self, vctr1 r) -> double
        __and__(vctr1 self, PyObject * t) -> double
        """
        return _model.vctr1___and__(self, *args)

    def __add__(self, *args):
        """
        __add__(vctr1 self, vctr1 r) -> vctr1
        __add__(vctr1 self, PyObject * t) -> vctr1
        """
        return _model.vctr1___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(vctr1 self, vctr1 r) -> vctr1
        __sub__(vctr1 self, PyObject * t) -> vctr1
        """
        return _model.vctr1___sub__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(vctr1 self, vctr1 r) -> vctr1
        __iadd__(vctr1 self, PyObject * t) -> vctr1
        """
        return _model.vctr1___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(vctr1 self, vctr1 r) -> vctr1
        __isub__(vctr1 self, PyObject * t) -> vctr1
        """
        return _model.vctr1___isub__(self, *args)

    def __lshift__(self, *args):
        """
        __lshift__(vctr1 self, vctr1 r) -> vctr1
        __lshift__(vctr1 self, PyObject * t) -> vctr1
        """
        return _model.vctr1___lshift__(self, *args)

    def __rshift__(self, *args):
        """
        __rshift__(vctr1 self, vctr1 r) -> vctr1
        __rshift__(vctr1 self, PyObject * t) -> vctr1
        """
        return _model.vctr1___rshift__(self, *args)

    def __ilshift__(self, *args):
        """
        __ilshift__(vctr1 self, vctr1 r) -> vctr1
        __ilshift__(vctr1 self, PyObject * t) -> vctr1
        """
        return _model.vctr1___ilshift__(self, *args)

    def __irshift__(self, *args):
        """
        __irshift__(vctr1 self, vctr1 r) -> vctr1
        __irshift__(vctr1 self, PyObject * t) -> vctr1
        """
        return _model.vctr1___irshift__(self, *args)

    def __xor__(self, *args):
        """
        __xor__(vctr1 self, vctr1 r) -> vctr1
        __xor__(vctr1 self, PyObject * t) -> vctr1
        """
        return _model.vctr1___xor__(self, *args)

    def __ixor__(self, *args):
        """
        __ixor__(vctr1 self, vctr1 r) -> vctr1
        __ixor__(vctr1 self, PyObject * t) -> vctr1
        """
        return _model.vctr1___ixor__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(vctr1 self, vctr1 r) -> double
        __mul__(vctr1 self, indx1 I) -> vctr1
        __mul__(vctr1 self, PyObject * t) -> vctr1
        __mul__(vctr1 self, double x) -> vctr1
        """
        return _model.vctr1___mul__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(vctr1 self, indx1 I) -> vctr1
        __imul__(vctr1 self, PyObject * t) -> vctr1
        __imul__(vctr1 self, double x) -> vctr1
        """
        return _model.vctr1___imul__(self, *args)

    def __div__(self, *args):
        """
        __div__(vctr1 self, vctr1 r) -> indx1
        __div__(vctr1 self, indx1 I) -> vctr1
        __div__(vctr1 self, PyObject * t) -> vctr1
        __div__(vctr1 self, double x) -> vctr1
        """
        return _model.vctr1___div__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(vctr1 self, indx1 I) -> vctr1
        __idiv__(vctr1 self, PyObject * t) -> vctr1
        __idiv__(vctr1 self, double x) -> vctr1
        """
        return _model.vctr1___idiv__(self, *args)

    def __neg__(self):
        """__neg__(vctr1 self) -> vctr1"""
        return _model.vctr1___neg__(self)

    def abs(self):
        """abs(vctr1 self) -> double"""
        return _model.vctr1_abs(self)

    def pow(self, *args):
        """
        pow(vctr1 self, int const n) -> vctr1
        pow(vctr1 self, double n) -> vctr1
        """
        return _model.vctr1_pow(self, *args)

    def is_nan(self):
        """is_nan(vctr1 self) -> bool"""
        return _model.vctr1_is_nan(self)

    def is_bad(self):
        """is_bad(vctr1 self) -> bool"""
        return _model.vctr1_is_bad(self)

    def circ(self, *args):
        """circ(vctr1 self, int l) -> vctr1"""
        return _model.vctr1_circ(self, *args)

    def c_str(self, separator=" ", format="%g"):
        """
        c_str(vctr1 self, char const * separator=" ", char const * format="%g") -> char const
        c_str(vctr1 self, char const * separator=" ") -> char const
        c_str(vctr1 self) -> char const *
        """
        return _model.vctr1_c_str(self, separator, format)

    def __rmul__(self, *args):
        """
        __rmul__(vctr1 self, double x) -> vctr1
        __rmul__(vctr1 self, indx1 I) -> vctr1
        __rmul__(vctr1 self, PyObject * t) -> vctr1
        """
        return _model.vctr1___rmul__(self, *args)

    def __len__(self):
        """__len__(vctr1 self) -> int const"""
        return _model.vctr1___len__(self)

    def __getitem__(self, *args):
        """__getitem__(vctr1 self, int i) -> double"""
        return _model.vctr1___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(vctr1 self, int i, double x)"""
        return _model.vctr1___setitem__(self, *args)

    def __getslice__(self, *args):
        """__getslice__(vctr1 self, long a, long b) -> PyObject *"""
        return _model.vctr1___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(vctr1 self, long a, long b, PyObject * t)"""
        return _model.vctr1___setslice__(self, *args)

    def __str__(self):
        """__str__(vctr1 self) -> PyObject *"""
        return _model.vctr1___str__(self)

    def __repr__(self):
        """__repr__(vctr1 self) -> PyObject *"""
        return _model.vctr1___repr__(self)

    def __getstate__(self):
        """__getstate__(vctr1 self) -> PyObject *"""
        return _model.vctr1___getstate__(self)

    def __C_setstate__(self, *args):
        """__C_setstate__(vctr1 self, PyObject * t)"""
        return _model.vctr1___C_setstate__(self, *args)

    def __init__(self, *args): 
        """
        __init__(aiv::vctr<(1,double)> self, double val=0) -> vctr1
        __init__(aiv::vctr<(1,double)> self) -> vctr1
        __init__(aiv::vctr<(1,double)> self, double const * Ap) -> vctr1
        __init__(aiv::vctr<(1,double)> self, vctr1 v) -> vctr1
        __init__(aiv::vctr<(1,double)> self, PyObject * t) -> vctr1
        """
        this = _model.new_vctr1(*args)
        try: self.this.append(this)
        except: self.this = this
    def __hash__(self):
        """__hash__(vctr1 self) -> long"""
        return _model.vctr1___hash__(self)

    def py_debug_info(self, *args):
        """py_debug_info(vctr1 self, aiv::debug_info & S)"""
        return _model.vctr1_py_debug_info(self, *args)

    __swig_destroy__ = _model.delete_vctr1
    __del__ = lambda self : None;
vctr1_swigregister = _model.vctr1_swigregister
vctr1_swigregister(vctr1)

def Vctr( *L ) : v = getattr( import_aivlib( 'vctr%i'%len(L) ), 'vctr%i'%len(L) )(); v[:] = tuple(L); return v
def _vctr1__xor__( a,b ) :  
  try : return Vctr(*map( float.__mul__, tuple(a),tuple(b) ) )  
  except : return  Vctr(*(tuple(a)[:b]+tuple(a)[b+1:]))
vctr1.__xor__ = _vctr1__xor__ 
vctr1.__or__ =lambda a,b : Vctr(*(tuple(a)+tuple(((b,),b)[b.__class__.__name__.startswith('vctr')])))  
vctr1.__ror__=lambda a,b : Vctr(*(tuple(((b,),b)[b.__class__.__name__.startswith('vctr')])+tuple(a)))  
vctr1.__setstate__ = _setstate 


def angle(*args):
  """angle(vctr1 a, vctr1 b, vctr1 c) -> double"""
  return _model.angle(*args)
class arrC2(_object):
    """Proxy of C++ aiv::array<(cell,2)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, arrC2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, arrC2, name)
    __repr__ = _swig_repr
    dim = _model.arrC2_dim
    dump_dim = _model.arrC2_dump_dim
    __swig_getmethods__["N"] = _model.arrC2_N_get
    if _newclass:N = _swig_property(_model.arrC2_N_get)
    def clean(self):
        """clean(arrC2 self)"""
        return _model.arrC2_clean(self)

    def init(self, *args):
        """init(arrC2 self, aiv::indx< 2 > const & AN)"""
        return _model.arrC2_init(self, *args)

    def mmap(self, *args):
        """
        mmap(arrC2 self, aiv::indx< 2 > const & AN, char const * fname, long offset, bool write=False)
        mmap(arrC2 self, aiv::indx< 2 > const & AN, char const * fname, long offset)
        """
        return _model.arrC2_mmap(self, *args)

    def info(self, *args):
        """
        info(arrC2 self, aiv::Ostream & S=mystdout)
        info(arrC2 self)
        """
        return _model.arrC2_info(self, *args)

    def solid_dims(self):
        """solid_dims(arrC2 self) -> int"""
        return _model.arrC2_solid_dims(self)

    def nb_shift(self, *args):
        """nb_shift(arrC2 self, int pos, int axe) -> long"""
        return _model.arrC2_nb_shift(self, *args)

    def index(self, *args):
        """
        index(arrC2 self, aiv::indx< 2 > const & I) -> long
        index(arrC2 self, long i) -> long
        """
        return _model.arrC2_index(self, *args)

    def get(self, *args):
        """
        get(arrC2 self, long i) -> cell
        get(arrC2 self, long i) -> cell
        """
        return _model.arrC2_get(self, *args)

    __swig_destroy__ = _model.delete_arrC2
    __del__ = lambda self : None;
    def copy(self):
        """copy(arrC2 self) -> arrC2"""
        return _model.arrC2_copy(self)

    def crop(self, *args):
        """
        crop(arrC2 self, aiv::indx< 2 > const & a, aiv::indx< 2 > const & b, aiv::indx< 2 > step=aiv::indx(1)) -> arrC2
        crop(arrC2 self, aiv::indx< 2 > const & a, aiv::indx< 2 > const & b) -> arrC2
        """
        return _model.arrC2_crop(self, *args)

    def swap(self, *args):
        """swap(arrC2 self, int i, int j) -> arrC2"""
        return _model.arrC2_swap(self, *args)

    def flip(self, *args):
        """flip(arrC2 self, int i) -> arrC2"""
        return _model.arrC2_flip(self, *args)

    def __len__(self):
        """__len__(arrC2 self) -> int"""
        return _model.arrC2___len__(self)

    def __getitem__(self, *args):
        """
        __getitem__(arrC2 self, aiv::indx< 2 > const & I) -> cell
        __getitem__(arrC2 self, long I) -> cell
        __getitem__(arrC2 self, PyObject * t) -> cell
        """
        return _model.arrC2___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(arrC2 self, aiv::indx< 2 > const & I, cell val)
        __setitem__(arrC2 self, long I, cell val)
        __setitem__(arrC2 self, PyObject * t, cell val)
        """
        return _model.arrC2___setitem__(self, *args)

    def __getstate__(self):
        """__getstate__(arrC2 self) -> PyObject *"""
        return _model.arrC2___getstate__(self)

    def __C_setstate__(self, *args):
        """__C_setstate__(arrC2 self, PyObject * t)"""
        return _model.arrC2___C_setstate__(self, *args)

    def dump(self, *args):
        """
        dump(arrC2 self, aiv::Ostream & S, char const * header=None)
        dump(arrC2 self, aiv::Ostream & S)
        """
        return _model.arrC2_dump(self, *args)

    def update(self, *args):
        """
        update(arrC2 self, aiv::Istream & S, aiv::indx< 2 > a=aiv::indx(), aiv::indx< 2 > b=aiv::indx(), aiv::indx< 2 > step=aiv::indx(1), 
            int * pos=None, int D2=2, int szT=sizeof(cell), 
            long shift_in=-1) -> aiv::indx< 2 >
        update(arrC2 self, aiv::Istream & S, aiv::indx< 2 > a=aiv::indx(), aiv::indx< 2 > b=aiv::indx(), aiv::indx< 2 > step=aiv::indx(1), 
            int * pos=None, int D2=2, int szT=sizeof(cell)) -> aiv::indx< 2 >
        update(arrC2 self, aiv::Istream & S, aiv::indx< 2 > a=aiv::indx(), aiv::indx< 2 > b=aiv::indx(), aiv::indx< 2 > step=aiv::indx(1), 
            int * pos=None, int D2=2) -> aiv::indx< 2 >
        update(arrC2 self, aiv::Istream & S, aiv::indx< 2 > a=aiv::indx(), aiv::indx< 2 > b=aiv::indx(), aiv::indx< 2 > step=aiv::indx(1), 
            int * pos=None) -> aiv::indx< 2 >
        update(arrC2 self, aiv::Istream & S, aiv::indx< 2 > a=aiv::indx(), aiv::indx< 2 > b=aiv::indx(), aiv::indx< 2 > step=aiv::indx(1)) -> aiv::indx< 2 >
        update(arrC2 self, aiv::Istream & S, aiv::indx< 2 > a=aiv::indx(), aiv::indx< 2 > b=aiv::indx()) -> aiv::indx< 2 >
        update(arrC2 self, aiv::Istream & S, aiv::indx< 2 > a=aiv::indx()) -> aiv::indx< 2 >
        update(arrC2 self, aiv::Istream & S) -> aiv::indx< 2 >
        update(arrC2 self, arrC2 A) -> aiv::indx< 2 >
        """
        return _model.arrC2_update(self, *args)

    def load(self, *args):
        """
        load(arrC2 self, aiv::Istream & S, aiv::indx< 2 > a=aiv::indx(), aiv::indx< 2 > b=aiv::indx(), aiv::indx< 2 > step=aiv::indx(1), 
            int * pos=None, int D2=2, int szT=sizeof(cell), 
            long shift_in=-1)
        load(arrC2 self, aiv::Istream & S, aiv::indx< 2 > a=aiv::indx(), aiv::indx< 2 > b=aiv::indx(), aiv::indx< 2 > step=aiv::indx(1), 
            int * pos=None, int D2=2, int szT=sizeof(cell))
        load(arrC2 self, aiv::Istream & S, aiv::indx< 2 > a=aiv::indx(), aiv::indx< 2 > b=aiv::indx(), aiv::indx< 2 > step=aiv::indx(1), 
            int * pos=None, int D2=2)
        load(arrC2 self, aiv::Istream & S, aiv::indx< 2 > a=aiv::indx(), aiv::indx< 2 > b=aiv::indx(), aiv::indx< 2 > step=aiv::indx(1), 
            int * pos=None)
        load(arrC2 self, aiv::Istream & S, aiv::indx< 2 > a=aiv::indx(), aiv::indx< 2 > b=aiv::indx(), aiv::indx< 2 > step=aiv::indx(1))
        load(arrC2 self, aiv::Istream & S, aiv::indx< 2 > a=aiv::indx(), aiv::indx< 2 > b=aiv::indx())
        load(arrC2 self, aiv::Istream & S, aiv::indx< 2 > a=aiv::indx())
        load(arrC2 self, aiv::Istream & S)
        load(arrC2 self, char const * fname, int D2=2, int axe=2-1, int * offset=None, int max=-1, bool write=False)
        load(arrC2 self, char const * fname, int D2=2, int axe=2-1, int * offset=None, int max=-1)
        load(arrC2 self, char const * fname, int D2=2, int axe=2-1, int * offset=None)
        load(arrC2 self, char const * fname, int D2=2, int axe=2-1)
        load(arrC2 self, char const * fname, int D2=2)
        load(arrC2 self, char const * fname)
        """
        return _model.arrC2_load(self, *args)

    def __init__(self, *args): 
        """
        __init__(aiv::array<(cell,2)> self) -> arrC2
        __init__(aiv::array<(cell,2)> self, aiv::indx< 2 > const & AN) -> arrC2
        __init__(aiv::array<(cell,2)> self, aiv::indx< 2 > const & AN, cell Ap) -> arrC2
        __init__(aiv::array<(cell,2)> self, arrC2 A) -> arrC2
        __init__(aiv::array<(cell,2)> self, aiv::indx< 2 > const & AN, char const * fname, int offset, bool write=False) -> arrC2
        __init__(aiv::array<(cell,2)> self, aiv::indx< 2 > const & AN, char const * fname, int offset) -> arrC2
        __init__(aiv::array<(cell,2)> self, aiv::Istream & S, aiv::indx< 2 > a=aiv::indx(), aiv::indx< 2 > b=aiv::indx(), aiv::indx< 2 > step=aiv::indx(1), 
            int * pos=None, int D2=2, int szT=sizeof(cell), 
            long shift_in=-1) -> arrC2
        __init__(aiv::array<(cell,2)> self, aiv::Istream & S, aiv::indx< 2 > a=aiv::indx(), aiv::indx< 2 > b=aiv::indx(), aiv::indx< 2 > step=aiv::indx(1), 
            int * pos=None, int D2=2, int szT=sizeof(cell)) -> arrC2
        __init__(aiv::array<(cell,2)> self, aiv::Istream & S, aiv::indx< 2 > a=aiv::indx(), aiv::indx< 2 > b=aiv::indx(), aiv::indx< 2 > step=aiv::indx(1), 
            int * pos=None, int D2=2) -> arrC2
        __init__(aiv::array<(cell,2)> self, aiv::Istream & S, aiv::indx< 2 > a=aiv::indx(), aiv::indx< 2 > b=aiv::indx(), aiv::indx< 2 > step=aiv::indx(1), 
            int * pos=None) -> arrC2
        __init__(aiv::array<(cell,2)> self, aiv::Istream & S, aiv::indx< 2 > a=aiv::indx(), aiv::indx< 2 > b=aiv::indx(), aiv::indx< 2 > step=aiv::indx(1)) -> arrC2
        __init__(aiv::array<(cell,2)> self, aiv::Istream & S, aiv::indx< 2 > a=aiv::indx(), aiv::indx< 2 > b=aiv::indx()) -> arrC2
        __init__(aiv::array<(cell,2)> self, aiv::Istream & S, aiv::indx< 2 > a=aiv::indx()) -> arrC2
        __init__(aiv::array<(cell,2)> self, aiv::Istream & S) -> arrC2
        __init__(aiv::array<(cell,2)> self, char const * fname, int D2=2, int axe=2-1, int * offset=None, int max=-1, bool write=False) -> arrC2
        __init__(aiv::array<(cell,2)> self, char const * fname, int D2=2, int axe=2-1, int * offset=None, int max=-1) -> arrC2
        __init__(aiv::array<(cell,2)> self, char const * fname, int D2=2, int axe=2-1, int * offset=None) -> arrC2
        __init__(aiv::array<(cell,2)> self, char const * fname, int D2=2, int axe=2-1) -> arrC2
        __init__(aiv::array<(cell,2)> self, char const * fname, int D2=2) -> arrC2
        __init__(aiv::array<(cell,2)> self, char const * fname) -> arrC2
        """
        this = _model.new_arrC2(*args)
        try: self.this.append(this)
        except: self.this = this
    def py_debug_info(self, *args):
        """py_debug_info(arrC2 self, aiv::debug_info & S)"""
        return _model.arrC2_py_debug_info(self, *args)

arrC2_swigregister = _model.arrC2_swigregister
arrC2_swigregister(arrC2)

class meshC2(arrC2):
    """Proxy of C++ aiv::mesh<(cell,2)> class"""
    __swig_setmethods__ = {}
    for _s in [arrC2]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, meshC2, name, value)
    __swig_getmethods__ = {}
    for _s in [arrC2]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, meshC2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["min"] = _model.meshC2_min_set
    __swig_getmethods__["min"] = _model.meshC2_min_get
    if _newclass:min = _swig_property(_model.meshC2_min_get, _model.meshC2_min_set)
    __swig_setmethods__["max"] = _model.meshC2_max_set
    __swig_getmethods__["max"] = _model.meshC2_max_get
    if _newclass:max = _swig_property(_model.meshC2_max_get, _model.meshC2_max_set)
    __swig_setmethods__["step"] = _model.meshC2_step_set
    __swig_getmethods__["step"] = _model.meshC2_step_get
    if _newclass:step = _swig_property(_model.meshC2_step_get, _model.meshC2_step_set)
    __swig_setmethods__["ext_val"] = _model.meshC2_ext_val_set
    __swig_getmethods__["ext_val"] = _model.meshC2_ext_val_get
    if _newclass:ext_val = _swig_property(_model.meshC2_ext_val_get, _model.meshC2_ext_val_set)
    def info(self, *args):
        """
        info(meshC2 self, aiv::Ostream & S=mystdout)
        info(meshC2 self)
        """
        return _model.meshC2_info(self, *args)

    def copy(self):
        """copy(meshC2 self) -> meshC2"""
        return _model.meshC2_copy(self)

    def crop(self, *args):
        """
        crop(meshC2 self, aiv::indx< 2 > const & a, aiv::indx< 2 > const & b, aiv::indx< 2 > istep=aiv::indx(1)) -> meshC2
        crop(meshC2 self, aiv::indx< 2 > const & a, aiv::indx< 2 > const & b) -> meshC2
        crop(meshC2 self, aiv::vctr< 2,double > const & a, aiv::vctr< 2,double > const & b, aiv::indx< 2 > istep=aiv::indx(1)) -> meshC2
        crop(meshC2 self, aiv::vctr< 2,double > const & a, aiv::vctr< 2,double > const & b) -> meshC2
        """
        return _model.meshC2_crop(self, *args)

    def swap(self, *args):
        """swap(meshC2 self, int i, int j) -> meshC2"""
        return _model.meshC2_swap(self, *args)

    def flip(self, *args):
        """flip(meshC2 self, int i) -> meshC2"""
        return _model.meshC2_flip(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(meshC2 self, long i) -> cell
        __getitem__(meshC2 self, aiv::indx< 2 > const & I) -> cell
        __getitem__(meshC2 self, PyObject * t) -> cell
        __getitem__(meshC2 self, aiv::vctr< 2,double > const & r) -> cell
        """
        return _model.meshC2___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(meshC2 self, long i, cell v)
        __setitem__(meshC2 self, aiv::indx< 2 > const & I, cell v)
        __setitem__(meshC2 self, PyObject * t, cell val)
        __setitem__(meshC2 self, aiv::vctr< 2,double > const & r, cell v)
        """
        return _model.meshC2___setitem__(self, *args)

    def __contains__(self, *args):
        """__contains__(meshC2 self, aiv::vctr< 2,double > const & r) -> bool"""
        return _model.meshC2___contains__(self, *args)

    def __getstate__(self):
        """__getstate__(meshC2 self) -> PyObject *"""
        return _model.meshC2___getstate__(self)

    def __C_setstate__(self, *args):
        """__C_setstate__(meshC2 self, PyObject * t)"""
        return _model.meshC2___C_setstate__(self, *args)

    def dump(self, *args):
        """
        dump(meshC2 self, aiv::Ostream & S, char const * head=None)
        dump(meshC2 self, aiv::Ostream & S)
        """
        return _model.meshC2_dump(self, *args)

    def load(self, *args):
        """
        load(meshC2 self, aiv::Istream & S, aiv::indx< 2 > a=aiv::indx(), aiv::indx< 2 > b=aiv::indx(), aiv::indx< 2 > step=aiv::indx(1), 
            int * pos=None, int D2=2, int szT=sizeof(cell), 
            long shift_in=-1)
        load(meshC2 self, aiv::Istream & S, aiv::indx< 2 > a=aiv::indx(), aiv::indx< 2 > b=aiv::indx(), aiv::indx< 2 > step=aiv::indx(1), 
            int * pos=None, int D2=2, int szT=sizeof(cell))
        load(meshC2 self, aiv::Istream & S, aiv::indx< 2 > a=aiv::indx(), aiv::indx< 2 > b=aiv::indx(), aiv::indx< 2 > step=aiv::indx(1), 
            int * pos=None, int D2=2)
        load(meshC2 self, aiv::Istream & S, aiv::indx< 2 > a=aiv::indx(), aiv::indx< 2 > b=aiv::indx(), aiv::indx< 2 > step=aiv::indx(1), 
            int * pos=None)
        load(meshC2 self, aiv::Istream & S, aiv::indx< 2 > a=aiv::indx(), aiv::indx< 2 > b=aiv::indx(), aiv::indx< 2 > step=aiv::indx(1))
        load(meshC2 self, aiv::Istream & S, aiv::indx< 2 > a=aiv::indx(), aiv::indx< 2 > b=aiv::indx())
        load(meshC2 self, aiv::Istream & S, aiv::indx< 2 > a=aiv::indx())
        load(meshC2 self, aiv::Istream & S)
        """
        return _model.meshC2_load(self, *args)

    def __init__(self, *args): 
        """
        __init__(aiv::mesh<(cell,2)> self) -> meshC2
        __init__(aiv::mesh<(cell,2)> self, aiv::indx< 2 > const & AN) -> meshC2
        __init__(aiv::mesh<(cell,2)> self, aiv::indx< 2 > const & AN, aiv::vctr< 2,double > const & Amin, aiv::vctr< 2,double > const & Amax, 
            cell Ap) -> meshC2
        __init__(aiv::mesh<(cell,2)> self, meshC2 M) -> meshC2
        __init__(aiv::mesh<(cell,2)> self, arrC2 A) -> meshC2
        __init__(aiv::mesh<(cell,2)> self, aiv::Istream & S) -> meshC2
        """
        this = _model.new_meshC2(*args)
        try: self.this.append(this)
        except: self.this = this
    def py_debug_info(self, *args):
        """py_debug_info(meshC2 self, aiv::debug_info & S)"""
        return _model.meshC2_py_debug_info(self, *args)

    __swig_destroy__ = _model.delete_meshC2
    __del__ = lambda self : None;
meshC2_swigregister = _model.meshC2_swigregister
meshC2_swigregister(meshC2)

class mult_arrC2(_object):
    """Proxy of C++ aiv::multiarray<(aiv::array<(cell,2)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mult_arrC2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mult_arrC2, name)
    __repr__ = _swig_repr
    dim = _model.mult_arrC2_dim
    __swig_setmethods__["N"] = _model.mult_arrC2_N_set
    __swig_getmethods__["N"] = _model.mult_arrC2_N_get
    if _newclass:N = _swig_property(_model.mult_arrC2_N_get, _model.mult_arrC2_N_set)
    __swig_setmethods__["ext_val"] = _model.mult_arrC2_ext_val_set
    __swig_getmethods__["ext_val"] = _model.mult_arrC2_ext_val_get
    if _newclass:ext_val = _swig_property(_model.mult_arrC2_ext_val_get, _model.mult_arrC2_ext_val_set)
    def __init__(self): 
        """__init__(aiv::multiarray<(aiv::array<(cell,2)>)> self) -> mult_arrC2"""
        this = _model.new_mult_arrC2()
        try: self.this.append(this)
        except: self.this = this
    def add_arr(self, *args):
        """add_arr(mult_arrC2 self, aiv::indx< 2 > const & offset, arrC2 arr)"""
        return _model.mult_arrC2_add_arr(self, *args)

    def dump(self, *args):
        """
        dump(mult_arrC2 self, aiv::Ostream & S, char const * header=None)
        dump(mult_arrC2 self, aiv::Ostream & S)
        """
        return _model.mult_arrC2_dump(self, *args)

    def load(self, *args):
        """load(mult_arrC2 self, aiv::Istream & S)"""
        return _model.mult_arrC2_load(self, *args)

    def __len__(self):
        """__len__(mult_arrC2 self) -> int"""
        return _model.mult_arrC2___len__(self)

    def __getitem__(self, *args):
        """
        __getitem__(mult_arrC2 self, aiv::multiarray< aiv::array< cell,2 > >::indx_type const & I) -> cell
        __getitem__(mult_arrC2 self, long I) -> cell
        """
        return _model.mult_arrC2___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(mult_arrC2 self, aiv::multiarray< aiv::array< cell,2 > >::indx_type const & I, cell val)
        __setitem__(mult_arrC2 self, long I, cell val)
        """
        return _model.mult_arrC2___setitem__(self, *args)

    __swig_destroy__ = _model.delete_mult_arrC2
    __del__ = lambda self : None;
mult_arrC2_swigregister = _model.mult_arrC2_swigregister
mult_arrC2_swigregister(mult_arrC2)

arrC2.__setstate__, meshC2.__setstate__ = _setstate, _setstate 

def splice1(*args):
  """
    splice1(arrC2 A, aiv::indx< 2 > pos) -> aiv::array< cell,1 >
    splice1(meshC2 A, aiv::indx< 2 > pos) -> aiv::mesh< cell,1 >
    """
  return _model.splice1(*args)
from aivlib.vctr2 import * 
from aivlib.mystream import * 
from aivlib.mystream import *; 
# This file is compatible with both classic and new-style classes.


