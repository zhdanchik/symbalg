import sys; sys.setdlopenflags(0x00100|sys.getdlopenflags())
# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_geom', [dirname(__file__)])
        except ImportError:
            import _geom
            return _geom
        if fp is not None:
            try:
                _mod = imp.load_module('_geom', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _geom = swig_import_helper()
    del swig_import_helper
else:
    import _geom
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _setstate( self, state ):
    if not hasattr( self, 'this' ) : self.__init__()
    self.__C_setstate__(state)
def import_aivlib(tgt) :
    name = tgt.split('-')[0]
    try : exec('import aivlib.'+name)
    except ImportError, e : import os; os.system('make-aivlib %r'%tgt); exec('import aivlib.'+name)
    return eval('aivlib.'+name)
def _swig_setattr(self,class_type,name,value):
    if name in class_type.__swig_setmethods__ : value = getattr( self, name ).__class__(value)
    return _swig_setattr_nondynamic(self,class_type,name,value,0)
__makefile__='model.mk'

class aiv_convert_for_compare_float(_object):
    """Proxy of C++ std::aiv_convert_for_compare_float class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aiv_convert_for_compare_float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aiv_convert_for_compare_float, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flt"] = _geom.aiv_convert_for_compare_float_flt_set
    __swig_getmethods__["flt"] = _geom.aiv_convert_for_compare_float_flt_get
    if _newclass:flt = _swig_property(_geom.aiv_convert_for_compare_float_flt_get, _geom.aiv_convert_for_compare_float_flt_set)
    __swig_setmethods__["fix"] = _geom.aiv_convert_for_compare_float_fix_set
    __swig_getmethods__["fix"] = _geom.aiv_convert_for_compare_float_fix_get
    if _newclass:fix = _swig_property(_geom.aiv_convert_for_compare_float_fix_get, _geom.aiv_convert_for_compare_float_fix_set)
    def __init__(self): 
        """__init__(std::aiv_convert_for_compare_float self) -> aiv_convert_for_compare_float"""
        this = _geom.new_aiv_convert_for_compare_float()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _geom.delete_aiv_convert_for_compare_float
    __del__ = lambda self : None;
aiv_convert_for_compare_float_swigregister = _geom.aiv_convert_for_compare_float_swigregister
aiv_convert_for_compare_float_swigregister(aiv_convert_for_compare_float)

class _base_mem(_object):
    """Proxy of C++ aiv::_base_mem class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _base_mem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _base_mem, name)
    __repr__ = _swig_repr
    __swig_getmethods__["D"] = _geom._base_mem_D_get
    if _newclass:D = _swig_property(_geom._base_mem_D_get)
    __swig_getmethods__["szT"] = _geom._base_mem_szT_get
    if _newclass:szT = _swig_property(_geom._base_mem_szT_get)
    __swig_setmethods__["N"] = _geom._base_mem_N_set
    __swig_getmethods__["N"] = _geom._base_mem_N_get
    if _newclass:N = _swig_property(_geom._base_mem_N_get, _geom._base_mem_N_set)
    __swig_setmethods__["owners"] = _geom._base_mem_owners_set
    __swig_getmethods__["owners"] = _geom._base_mem_owners_get
    if _newclass:owners = _swig_property(_geom._base_mem_owners_get, _geom._base_mem_owners_set)
    def __init__(self, *args): 
        """__init__(aiv::_base_mem self, int AszT, int AD, int * AN) -> _base_mem"""
        this = _geom.new__base_mem(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _geom.delete__base_mem
    __del__ = lambda self : None;
    def len(self):
        """len(_base_mem self) -> size_t"""
        return _geom._base_mem_len(self)

_base_mem_swigregister = _geom._base_mem_swigregister
_base_mem_swigregister(_base_mem)

class arr_head(_object):
    """Proxy of C++ aiv::arr_head class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, arr_head, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, arr_head, name)
    __repr__ = _swig_repr
    __swig_getmethods__["D"] = _geom.arr_head_D_get
    if _newclass:D = _swig_property(_geom.arr_head_D_get)
    __swig_getmethods__["szT"] = _geom.arr_head_szT_get
    if _newclass:szT = _swig_property(_geom.arr_head_szT_get)
    __swig_getmethods__["N"] = _geom.arr_head_N_get
    if _newclass:N = _swig_property(_geom.arr_head_N_get)
    def load(self, *args):
        """load(arr_head self, aiv::Istream & S)"""
        return _geom.arr_head_load(self, *args)

    def __init__(self, *args): 
        """
        __init__(aiv::arr_head self) -> arr_head
        __init__(aiv::arr_head self, aiv::Istream & S) -> arr_head
        __init__(aiv::arr_head self, arr_head H) -> arr_head
        """
        this = _geom.new_arr_head(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _geom.delete_arr_head
    __del__ = lambda self : None;
arr_head_swigregister = _geom.arr_head_swigregister
arr_head_swigregister(arr_head)

class lrc_head(_object):
    """Proxy of C++ aiv::lrc_head class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lrc_head, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lrc_head, name)
    __repr__ = _swig_repr
    __swig_getmethods__["D"] = _geom.lrc_head_D_get
    if _newclass:D = _swig_property(_geom.lrc_head_D_get)
    __swig_getmethods__["D2"] = _geom.lrc_head_D2_get
    if _newclass:D2 = _swig_property(_geom.lrc_head_D2_get)
    __swig_getmethods__["szT"] = _geom.lrc_head_szT_get
    if _newclass:szT = _swig_property(_geom.lrc_head_szT_get)
    __swig_getmethods__["R"] = _geom.lrc_head_R_get
    if _newclass:R = _swig_property(_geom.lrc_head_R_get)
    __swig_getmethods__["N"] = _geom.lrc_head_N_get
    if _newclass:N = _swig_property(_geom.lrc_head_N_get)
    __swig_destroy__ = _geom.delete_lrc_head
    __del__ = lambda self : None;
    def load(self, *args):
        """load(lrc_head self, aiv::Istream & S)"""
        return _geom.lrc_head_load(self, *args)

    def __init__(self, *args): 
        """
        __init__(aiv::lrc_head self) -> lrc_head
        __init__(aiv::lrc_head self, aiv::Istream & S) -> lrc_head
        __init__(aiv::lrc_head self, lrc_head H) -> lrc_head
        """
        this = _geom.new_lrc_head(*args)
        try: self.this.append(this)
        except: self.this = this
lrc_head_swigregister = _geom.lrc_head_swigregister
lrc_head_swigregister(lrc_head)

class base_sphere(_object):
    """Proxy of C++ aiv::base_sphere class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, base_sphere, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, base_sphere, name)
    __repr__ = _swig_repr
    __swig_getmethods__["R"] = _geom.base_sphere_R_get
    if _newclass:R = _swig_property(_geom.base_sphere_R_get)
    __swig_getmethods__["N"] = _geom.base_sphere_N_get
    if _newclass:N = _swig_property(_geom.base_sphere_N_get)
    def get_ref_count(self):
        """get_ref_count(base_sphere self) -> int"""
        return _geom.base_sphere_get_ref_count(self)

    def __init__(self, *args): 
        """
        __init__(aiv::base_sphere self, int AR=-1) -> base_sphere
        __init__(aiv::base_sphere self) -> base_sphere
        __init__(aiv::base_sphere self, base_sphere S) -> base_sphere
        """
        this = _geom.new_base_sphere(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _geom.delete_base_sphere
    __del__ = lambda self : None;
    def init(self, *args):
        """init(base_sphere self, int AR)"""
        return _geom.base_sphere_init(self, *args)

    def get_cell_id(self, *args):
        """get_cell_id(base_sphere self, vctr3 r) -> int"""
        return _geom.base_sphere_get_cell_id(self, *args)

    def get_cell_vertex(self, *args):
        """get_cell_vertex(base_sphere self, int cid) -> indx3"""
        return _geom.base_sphere_get_cell_vertex(self, *args)

    def get_vertex(self, *args):
        """get_vertex(base_sphere self, int vid) -> vctr3"""
        return _geom.base_sphere_get_vertex(self, *args)

    def get_cell_neighbours(self, *args):
        """get_cell_neighbours(base_sphere self, int cid) -> indx3"""
        return _geom.base_sphere_get_cell_neighbours(self, *args)

    def get_vertex_cells(self, *args):
        """get_vertex_cells(base_sphere self, int vid) -> aiv::indx< 6 > const &"""
        return _geom.base_sphere_get_vertex_cells(self, *args)

    def get_cell_area(self, *args):
        """get_cell_area(base_sphere self, int cid) -> double"""
        return _geom.base_sphere_get_cell_area(self, *args)

    def get_coord(self, *args):
        """get_coord(base_sphere self, vctr3 x, long i, int AR)"""
        return _geom.base_sphere_get_coord(self, *args)

    def get_nb(self, *args):
        """get_nb(base_sphere self, long * nb, long i, int AR)"""
        return _geom.base_sphere_get_nb(self, *args)

    def get_cell_center(self, *args):
        """
        get_cell_center(base_sphere self, int cid) -> vctr3
        get_cell_center(base_sphere self, long cid, int AR) -> vctr3
        """
        return _geom.base_sphere_get_cell_center(self, *args)

base_sphere_swigregister = _geom.base_sphere_swigregister
base_sphere_swigregister(base_sphere)
cvar = _geom.cvar
MAX_RANK = cvar.MAX_RANK


def barecentr(*args):
  """barecentr(vctr3 x, vctr3 r) -> vctr3"""
  return _geom.barecentr(*args)
class Figure(_object):
    """Proxy of C++ Figure class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Figure, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Figure, name)
    __repr__ = _swig_repr
    def get_min(self):
        """get_min(Figure self) -> aiv::vctr< 3 >"""
        return _geom.Figure_get_min(self)

    def get_max(self):
        """get_max(Figure self) -> aiv::vctr< 3 >"""
        return _geom.Figure_get_max(self)

    def check(self, *args):
        """check(Figure self, vctr3 r) -> bool"""
        return _geom.Figure_check(self, *args)

    def transform(self, *args):
        """transform(Figure self, vctr3 ox, vctr3 oy, vctr3 oz) -> Figure"""
        return _geom.Figure_transform(self, *args)

    def move(self, *args):
        """move(Figure self, vctr3 offset) -> Figure"""
        return _geom.Figure_move(self, *args)

    def rotate(self, *args):
        """rotate(Figure self, vctr3 center, vctr3 n_phi) -> Figure"""
        return _geom.Figure_rotate(self, *args)

    def __add__(self, *args):
        """__add__(Figure self, Figure other) -> Figure"""
        return _geom.Figure___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(Figure self, Figure other) -> Figure"""
        return _geom.Figure___sub__(self, *args)

    def __mul__(self, *args):
        """__mul__(Figure self, Figure other) -> Figure"""
        return _geom.Figure___mul__(self, *args)

    def __init__(self): 
        """__init__(Figure self) -> Figure"""
        this = _geom.new_Figure()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _geom.delete_Figure
    __del__ = lambda self : None;
Figure_swigregister = _geom.Figure_swigregister
Figure_swigregister(Figure)

def cylinder(*args):
  """cylinder(vctr3 bottom_origin_center, vctr3 n, double R, double H) -> Figure"""
  return _geom.cylinder(*args)

def box(*args):
  """box(vctr3 bottom_origin_center, vctr3 n, double phi, double A, double B, double H) -> Figure"""
  return _geom.box(*args)

def cube(*args):
  """cube(vctr3 bottom_origin_center, vctr3 n, double phi, double A) -> Figure"""
  return _geom.cube(*args)

class indx1(_object):
    """Proxy of C++ aiv::indx<(1)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, indx1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, indx1, name)
    def volume(self):
        """volume(indx1 self) -> long"""
        return _geom.indx1_volume(self)

    def __lt__(self, *args):
        """
        __lt__(indx1 self, indx1 r) -> bool
        __lt__(indx1 self, PyObject * t) -> bool
        __lt__(indx1 self, long i) -> bool
        """
        return _geom.indx1___lt__(self, *args)

    def __le__(self, *args):
        """
        __le__(indx1 self, indx1 r) -> bool
        __le__(indx1 self, PyObject * t) -> bool
        __le__(indx1 self, long i) -> bool
        """
        return _geom.indx1___le__(self, *args)

    def __gt__(self, *args):
        """
        __gt__(indx1 self, indx1 r) -> bool
        __gt__(indx1 self, PyObject * t) -> bool
        __gt__(indx1 self, long i) -> bool
        """
        return _geom.indx1___gt__(self, *args)

    def __ge__(self, *args):
        """
        __ge__(indx1 self, indx1 r) -> bool
        __ge__(indx1 self, PyObject * t) -> bool
        __ge__(indx1 self, long i) -> bool
        """
        return _geom.indx1___ge__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(indx1 self, indx1 r) -> bool
        __eq__(indx1 self, PyObject * t) -> bool
        __eq__(indx1 self, long i) -> bool
        """
        return _geom.indx1___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(indx1 self, indx1 r) -> bool
        __ne__(indx1 self, PyObject * t) -> bool
        __ne__(indx1 self, long i) -> bool
        """
        return _geom.indx1___ne__(self, *args)

    def __add__(self, *args):
        """
        __add__(indx1 self, indx1 r) -> indx1
        __add__(indx1 self, PyObject * t) -> indx1
        """
        return _geom.indx1___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(indx1 self, indx1 r) -> indx1
        __sub__(indx1 self, PyObject * t) -> indx1
        """
        return _geom.indx1___sub__(self, *args)

    def __xor__(self, *args):
        """
        __xor__(indx1 self, indx1 r) -> indx1
        __xor__(indx1 self, PyObject * t) -> indx1
        """
        return _geom.indx1___xor__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(indx1 self, indx1 r) -> long
        __mul__(indx1 self, int j) -> indx1
        """
        return _geom.indx1___mul__(self, *args)

    def __imul__(self, *args):
        """__imul__(indx1 self, int j) -> indx1"""
        return _geom.indx1___imul__(self, *args)

    def __neg__(self):
        """__neg__(indx1 self) -> indx1"""
        return _geom.indx1___neg__(self)

    def __ixor__(self, *args):
        """
        __ixor__(indx1 self, indx1 r) -> indx1
        __ixor__(indx1 self, PyObject * t) -> indx1
        """
        return _geom.indx1___ixor__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(indx1 self, indx1 r) -> indx1
        __iadd__(indx1 self, PyObject * t) -> indx1
        """
        return _geom.indx1___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(indx1 self, indx1 r) -> indx1
        __isub__(indx1 self, PyObject * t) -> indx1
        """
        return _geom.indx1___isub__(self, *args)

    def __lshift__(self, *args):
        """
        __lshift__(indx1 self, indx1 b) -> indx1
        __lshift__(indx1 self, PyObject * t) -> indx1
        """
        return _geom.indx1___lshift__(self, *args)

    def __rshift__(self, *args):
        """
        __rshift__(indx1 self, indx1 b) -> indx1
        __rshift__(indx1 self, PyObject * t) -> indx1
        """
        return _geom.indx1___rshift__(self, *args)

    def __ilshift__(self, *args):
        """
        __ilshift__(indx1 self, indx1 b) -> indx1
        __ilshift__(indx1 self, PyObject * t) -> indx1
        """
        return _geom.indx1___ilshift__(self, *args)

    def __irshift__(self, *args):
        """
        __irshift__(indx1 self, indx1 b) -> indx1
        __irshift__(indx1 self, PyObject * t) -> indx1
        """
        return _geom.indx1___irshift__(self, *args)

    def __mod__(self, *args):
        """
        __mod__(indx1 self, indx1 b) -> indx1
        __mod__(indx1 self, PyObject * t) -> indx1
        """
        return _geom.indx1___mod__(self, *args)

    def __imod__(self, *args):
        """
        __imod__(indx1 self, indx1 b) -> indx1
        __imod__(indx1 self, PyObject * t) -> indx1
        """
        return _geom.indx1___imod__(self, *args)

    def __rmod__(self, *args):
        """__rmod__(indx1 self, long x) -> indx1"""
        return _geom.indx1___rmod__(self, *args)

    def __div__(self, *args):
        """
        __div__(indx1 self, indx1 b) -> indx1
        __div__(indx1 self, PyObject * t) -> indx1
        __div__(indx1 self, int x) -> indx1
        """
        return _geom.indx1___div__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(indx1 self, indx1 b) -> indx1
        __idiv__(indx1 self, PyObject * t) -> indx1
        __idiv__(indx1 self, int x) -> indx1
        """
        return _geom.indx1___idiv__(self, *args)

    def circ(self, *args):
        """circ(indx1 self, int l) -> indx1"""
        return _geom.indx1_circ(self, *args)

    def c_str(self, separator=" ", format="%i"):
        """
        c_str(indx1 self, char const * separator=" ", char const * format="%i") -> char const
        c_str(indx1 self, char const * separator=" ") -> char const
        c_str(indx1 self) -> char const *
        """
        return _geom.indx1_c_str(self, separator, format)

    def __contains__(self, *args):
        """__contains__(indx1 self, indx1 I) -> bool"""
        return _geom.indx1___contains__(self, *args)

    def __rmul__(self, *args):
        """__rmul__(indx1 self, int x) -> indx1"""
        return _geom.indx1___rmul__(self, *args)

    def __len__(self):
        """__len__(indx1 self) -> int const"""
        return _geom.indx1___len__(self)

    def __int__(self):
        """__int__(indx1 self) -> long"""
        return _geom.indx1___int__(self)

    def __getitem__(self, *args):
        """__getitem__(indx1 self, int i) -> int"""
        return _geom.indx1___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(indx1 self, int i, int x)"""
        return _geom.indx1___setitem__(self, *args)

    def __getslice__(self, *args):
        """__getslice__(indx1 self, long a, long b) -> PyObject *"""
        return _geom.indx1___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(indx1 self, long a, long b, PyObject * t)"""
        return _geom.indx1___setslice__(self, *args)

    def __str__(self):
        """__str__(indx1 self) -> PyObject *"""
        return _geom.indx1___str__(self)

    def __repr__(self):
        """__repr__(indx1 self) -> PyObject *"""
        return _geom.indx1___repr__(self)

    def __getstate__(self):
        """__getstate__(indx1 self) -> PyObject *"""
        return _geom.indx1___getstate__(self)

    def __C_setstate__(self, *args):
        """__C_setstate__(indx1 self, PyObject * t)"""
        return _geom.indx1___C_setstate__(self, *args)

    def __init__(self, *args): 
        """
        __init__(aiv::indx<(1)> self, int val=0) -> indx1
        __init__(aiv::indx<(1)> self) -> indx1
        __init__(aiv::indx<(1)> self, int const * Ap) -> indx1
        __init__(aiv::indx<(1)> self, PyObject * t) -> indx1
        """
        this = _geom.new_indx1(*args)
        try: self.this.append(this)
        except: self.this = this
    def __hash__(self):
        """__hash__(indx1 self) -> long"""
        return _geom.indx1___hash__(self)

    def py_debug_info(self, *args):
        """py_debug_info(indx1 self, aiv::debug_info & S)"""
        return _geom.indx1_py_debug_info(self, *args)

    def less(self, *args):
        """
        less(indx1 self, indx1 N) -> bool
        less(indx1 self, indx1 N, int const seq) -> bool
        """
        return _geom.indx1_less(self, *args)

    def next(self, *args):
        """
        next(indx1 self, indx1 finish) -> bool
        next(indx1 self, indx1 start, indx1 finish) -> bool
        next(indx1 self, indx1 start, indx1 finish, int const seq, int const direct=0) -> bool
        next(indx1 self, indx1 start, indx1 finish, int const seq) -> bool
        next(indx1 self, indx1 finish, int const seq, int const direct=0) -> bool
        next(indx1 self, indx1 finish, int const seq) -> bool
        """
        return _geom.indx1_next(self, *args)

    def z_next(self, *args):
        """
        z_next(indx1 self, int const rank) -> bool
        z_next(indx1 self, int const rank, int const seq) -> bool
        """
        return _geom.indx1_z_next(self, *args)

    __swig_destroy__ = _geom.delete_indx1
    __del__ = lambda self : None;
indx1_swigregister = _geom.indx1_swigregister
indx1_swigregister(indx1)

def Indx( *L ) : v = getattr( import_aivlib( 'indx%i'%len(L) ), 'indx%i'%len(L) )(); v[:] = tuple(L); return v
indx1.__rcmp__=lambda a,b : -b.__cmp__(a) 
def _indx1__xor__( a,b ) :  
  try : return Indx(*map( int.__mul__, tuple(a),tuple(b) ) )  
  except : return  Indx(*(tuple(a)[:b]+tuple(a)[b+1:]))
indx1.__xor__ = _indx1__xor__ 
indx1.__or__ =lambda a,b : Indx(*(tuple(a)+tuple(((b,),b)[b.__class__.__name__.startswith('indx')])))  
indx1.__ror__=lambda a,b : Indx(*(tuple(((b,),b)[b.__class__.__name__.startswith('indx')])+tuple(a)))  
indx1.__setstate__ = _setstate 

class vctr1(_object):
    """Proxy of C++ aiv::vctr<(1,double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vctr1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vctr1, name)
    def __lt__(self, *args):
        """
        __lt__(vctr1 self, vctr1 r) -> bool
        __lt__(vctr1 self, PyObject * t) -> bool
        """
        return _geom.vctr1___lt__(self, *args)

    def __le__(self, *args):
        """
        __le__(vctr1 self, vctr1 r) -> bool
        __le__(vctr1 self, PyObject * t) -> bool
        """
        return _geom.vctr1___le__(self, *args)

    def __gt__(self, *args):
        """
        __gt__(vctr1 self, vctr1 r) -> bool
        __gt__(vctr1 self, PyObject * t) -> bool
        """
        return _geom.vctr1___gt__(self, *args)

    def __ge__(self, *args):
        """
        __ge__(vctr1 self, vctr1 r) -> bool
        __ge__(vctr1 self, PyObject * t) -> bool
        """
        return _geom.vctr1___ge__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(vctr1 self, vctr1 r) -> bool
        __eq__(vctr1 self, PyObject * t) -> bool
        """
        return _geom.vctr1___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(vctr1 self, vctr1 r) -> bool
        __ne__(vctr1 self, PyObject * t) -> bool
        """
        return _geom.vctr1___ne__(self, *args)

    def __and__(self, *args):
        """
        __and__(vctr1 self, vctr1 r) -> double
        __and__(vctr1 self, PyObject * t) -> double
        """
        return _geom.vctr1___and__(self, *args)

    def __add__(self, *args):
        """
        __add__(vctr1 self, vctr1 r) -> vctr1
        __add__(vctr1 self, PyObject * t) -> vctr1
        """
        return _geom.vctr1___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(vctr1 self, vctr1 r) -> vctr1
        __sub__(vctr1 self, PyObject * t) -> vctr1
        """
        return _geom.vctr1___sub__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(vctr1 self, vctr1 r) -> vctr1
        __iadd__(vctr1 self, PyObject * t) -> vctr1
        """
        return _geom.vctr1___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(vctr1 self, vctr1 r) -> vctr1
        __isub__(vctr1 self, PyObject * t) -> vctr1
        """
        return _geom.vctr1___isub__(self, *args)

    def __lshift__(self, *args):
        """
        __lshift__(vctr1 self, vctr1 r) -> vctr1
        __lshift__(vctr1 self, PyObject * t) -> vctr1
        """
        return _geom.vctr1___lshift__(self, *args)

    def __rshift__(self, *args):
        """
        __rshift__(vctr1 self, vctr1 r) -> vctr1
        __rshift__(vctr1 self, PyObject * t) -> vctr1
        """
        return _geom.vctr1___rshift__(self, *args)

    def __ilshift__(self, *args):
        """
        __ilshift__(vctr1 self, vctr1 r) -> vctr1
        __ilshift__(vctr1 self, PyObject * t) -> vctr1
        """
        return _geom.vctr1___ilshift__(self, *args)

    def __irshift__(self, *args):
        """
        __irshift__(vctr1 self, vctr1 r) -> vctr1
        __irshift__(vctr1 self, PyObject * t) -> vctr1
        """
        return _geom.vctr1___irshift__(self, *args)

    def __xor__(self, *args):
        """
        __xor__(vctr1 self, vctr1 r) -> vctr1
        __xor__(vctr1 self, PyObject * t) -> vctr1
        """
        return _geom.vctr1___xor__(self, *args)

    def __ixor__(self, *args):
        """
        __ixor__(vctr1 self, vctr1 r) -> vctr1
        __ixor__(vctr1 self, PyObject * t) -> vctr1
        """
        return _geom.vctr1___ixor__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(vctr1 self, vctr1 r) -> double
        __mul__(vctr1 self, indx1 I) -> vctr1
        __mul__(vctr1 self, PyObject * t) -> vctr1
        __mul__(vctr1 self, double x) -> vctr1
        """
        return _geom.vctr1___mul__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(vctr1 self, indx1 I) -> vctr1
        __imul__(vctr1 self, PyObject * t) -> vctr1
        __imul__(vctr1 self, double x) -> vctr1
        """
        return _geom.vctr1___imul__(self, *args)

    def __div__(self, *args):
        """
        __div__(vctr1 self, vctr1 r) -> indx1
        __div__(vctr1 self, indx1 I) -> vctr1
        __div__(vctr1 self, PyObject * t) -> vctr1
        __div__(vctr1 self, double x) -> vctr1
        """
        return _geom.vctr1___div__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(vctr1 self, indx1 I) -> vctr1
        __idiv__(vctr1 self, PyObject * t) -> vctr1
        __idiv__(vctr1 self, double x) -> vctr1
        """
        return _geom.vctr1___idiv__(self, *args)

    def __neg__(self):
        """__neg__(vctr1 self) -> vctr1"""
        return _geom.vctr1___neg__(self)

    def abs(self):
        """abs(vctr1 self) -> double"""
        return _geom.vctr1_abs(self)

    def pow(self, *args):
        """
        pow(vctr1 self, int const n) -> vctr1
        pow(vctr1 self, double n) -> vctr1
        """
        return _geom.vctr1_pow(self, *args)

    def is_nan(self):
        """is_nan(vctr1 self) -> bool"""
        return _geom.vctr1_is_nan(self)

    def is_bad(self):
        """is_bad(vctr1 self) -> bool"""
        return _geom.vctr1_is_bad(self)

    def circ(self, *args):
        """circ(vctr1 self, int l) -> vctr1"""
        return _geom.vctr1_circ(self, *args)

    def c_str(self, separator=" ", format="%g"):
        """
        c_str(vctr1 self, char const * separator=" ", char const * format="%g") -> char const
        c_str(vctr1 self, char const * separator=" ") -> char const
        c_str(vctr1 self) -> char const *
        """
        return _geom.vctr1_c_str(self, separator, format)

    def __rmul__(self, *args):
        """
        __rmul__(vctr1 self, double x) -> vctr1
        __rmul__(vctr1 self, indx1 I) -> vctr1
        __rmul__(vctr1 self, PyObject * t) -> vctr1
        """
        return _geom.vctr1___rmul__(self, *args)

    def __len__(self):
        """__len__(vctr1 self) -> int const"""
        return _geom.vctr1___len__(self)

    def __getitem__(self, *args):
        """__getitem__(vctr1 self, int i) -> double"""
        return _geom.vctr1___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(vctr1 self, int i, double x)"""
        return _geom.vctr1___setitem__(self, *args)

    def __getslice__(self, *args):
        """__getslice__(vctr1 self, long a, long b) -> PyObject *"""
        return _geom.vctr1___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(vctr1 self, long a, long b, PyObject * t)"""
        return _geom.vctr1___setslice__(self, *args)

    def __str__(self):
        """__str__(vctr1 self) -> PyObject *"""
        return _geom.vctr1___str__(self)

    def __repr__(self):
        """__repr__(vctr1 self) -> PyObject *"""
        return _geom.vctr1___repr__(self)

    def __getstate__(self):
        """__getstate__(vctr1 self) -> PyObject *"""
        return _geom.vctr1___getstate__(self)

    def __C_setstate__(self, *args):
        """__C_setstate__(vctr1 self, PyObject * t)"""
        return _geom.vctr1___C_setstate__(self, *args)

    def __init__(self, *args): 
        """
        __init__(aiv::vctr<(1,double)> self, double val=0) -> vctr1
        __init__(aiv::vctr<(1,double)> self) -> vctr1
        __init__(aiv::vctr<(1,double)> self, double const * Ap) -> vctr1
        __init__(aiv::vctr<(1,double)> self, vctr1 v) -> vctr1
        __init__(aiv::vctr<(1,double)> self, PyObject * t) -> vctr1
        """
        this = _geom.new_vctr1(*args)
        try: self.this.append(this)
        except: self.this = this
    def __hash__(self):
        """__hash__(vctr1 self) -> long"""
        return _geom.vctr1___hash__(self)

    def py_debug_info(self, *args):
        """py_debug_info(vctr1 self, aiv::debug_info & S)"""
        return _geom.vctr1_py_debug_info(self, *args)

    __swig_destroy__ = _geom.delete_vctr1
    __del__ = lambda self : None;
vctr1_swigregister = _geom.vctr1_swigregister
vctr1_swigregister(vctr1)

def Vctr( *L ) : v = getattr( import_aivlib( 'vctr%i'%len(L) ), 'vctr%i'%len(L) )(); v[:] = tuple(L); return v
def _vctr1__xor__( a,b ) :  
  try : return Vctr(*map( float.__mul__, tuple(a),tuple(b) ) )  
  except : return  Vctr(*(tuple(a)[:b]+tuple(a)[b+1:]))
vctr1.__xor__ = _vctr1__xor__ 
vctr1.__or__ =lambda a,b : Vctr(*(tuple(a)+tuple(((b,),b)[b.__class__.__name__.startswith('vctr')])))  
vctr1.__ror__=lambda a,b : Vctr(*(tuple(((b,),b)[b.__class__.__name__.startswith('vctr')])+tuple(a)))  
vctr1.__setstate__ = _setstate 

class indx3(_object):
    """Proxy of C++ aiv::indx<(3)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, indx3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, indx3, name)
    def volume(self):
        """volume(indx3 self) -> long"""
        return _geom.indx3_volume(self)

    def __lt__(self, *args):
        """
        __lt__(indx3 self, indx3 r) -> bool
        __lt__(indx3 self, PyObject * t) -> bool
        __lt__(indx3 self, long i) -> bool
        """
        return _geom.indx3___lt__(self, *args)

    def __le__(self, *args):
        """
        __le__(indx3 self, indx3 r) -> bool
        __le__(indx3 self, PyObject * t) -> bool
        __le__(indx3 self, long i) -> bool
        """
        return _geom.indx3___le__(self, *args)

    def __gt__(self, *args):
        """
        __gt__(indx3 self, indx3 r) -> bool
        __gt__(indx3 self, PyObject * t) -> bool
        __gt__(indx3 self, long i) -> bool
        """
        return _geom.indx3___gt__(self, *args)

    def __ge__(self, *args):
        """
        __ge__(indx3 self, indx3 r) -> bool
        __ge__(indx3 self, PyObject * t) -> bool
        __ge__(indx3 self, long i) -> bool
        """
        return _geom.indx3___ge__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(indx3 self, indx3 r) -> bool
        __eq__(indx3 self, PyObject * t) -> bool
        __eq__(indx3 self, long i) -> bool
        """
        return _geom.indx3___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(indx3 self, indx3 r) -> bool
        __ne__(indx3 self, PyObject * t) -> bool
        __ne__(indx3 self, long i) -> bool
        """
        return _geom.indx3___ne__(self, *args)

    def __add__(self, *args):
        """
        __add__(indx3 self, indx3 r) -> indx3
        __add__(indx3 self, PyObject * t) -> indx3
        """
        return _geom.indx3___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(indx3 self, indx3 r) -> indx3
        __sub__(indx3 self, PyObject * t) -> indx3
        """
        return _geom.indx3___sub__(self, *args)

    def __xor__(self, *args):
        """
        __xor__(indx3 self, indx3 r) -> indx3
        __xor__(indx3 self, PyObject * t) -> indx3
        """
        return _geom.indx3___xor__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(indx3 self, indx3 r) -> long
        __mul__(indx3 self, int j) -> indx3
        """
        return _geom.indx3___mul__(self, *args)

    def __imul__(self, *args):
        """__imul__(indx3 self, int j) -> indx3"""
        return _geom.indx3___imul__(self, *args)

    def __neg__(self):
        """__neg__(indx3 self) -> indx3"""
        return _geom.indx3___neg__(self)

    def __ixor__(self, *args):
        """
        __ixor__(indx3 self, indx3 r) -> indx3
        __ixor__(indx3 self, PyObject * t) -> indx3
        """
        return _geom.indx3___ixor__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(indx3 self, indx3 r) -> indx3
        __iadd__(indx3 self, PyObject * t) -> indx3
        """
        return _geom.indx3___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(indx3 self, indx3 r) -> indx3
        __isub__(indx3 self, PyObject * t) -> indx3
        """
        return _geom.indx3___isub__(self, *args)

    def __lshift__(self, *args):
        """
        __lshift__(indx3 self, indx3 b) -> indx3
        __lshift__(indx3 self, PyObject * t) -> indx3
        """
        return _geom.indx3___lshift__(self, *args)

    def __rshift__(self, *args):
        """
        __rshift__(indx3 self, indx3 b) -> indx3
        __rshift__(indx3 self, PyObject * t) -> indx3
        """
        return _geom.indx3___rshift__(self, *args)

    def __ilshift__(self, *args):
        """
        __ilshift__(indx3 self, indx3 b) -> indx3
        __ilshift__(indx3 self, PyObject * t) -> indx3
        """
        return _geom.indx3___ilshift__(self, *args)

    def __irshift__(self, *args):
        """
        __irshift__(indx3 self, indx3 b) -> indx3
        __irshift__(indx3 self, PyObject * t) -> indx3
        """
        return _geom.indx3___irshift__(self, *args)

    def __mod__(self, *args):
        """
        __mod__(indx3 self, indx3 b) -> indx3
        __mod__(indx3 self, PyObject * t) -> indx3
        """
        return _geom.indx3___mod__(self, *args)

    def __imod__(self, *args):
        """
        __imod__(indx3 self, indx3 b) -> indx3
        __imod__(indx3 self, PyObject * t) -> indx3
        """
        return _geom.indx3___imod__(self, *args)

    def __rmod__(self, *args):
        """__rmod__(indx3 self, long x) -> indx3"""
        return _geom.indx3___rmod__(self, *args)

    def __div__(self, *args):
        """
        __div__(indx3 self, indx3 b) -> indx3
        __div__(indx3 self, PyObject * t) -> indx3
        __div__(indx3 self, int x) -> indx3
        """
        return _geom.indx3___div__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(indx3 self, indx3 b) -> indx3
        __idiv__(indx3 self, PyObject * t) -> indx3
        __idiv__(indx3 self, int x) -> indx3
        """
        return _geom.indx3___idiv__(self, *args)

    def circ(self, *args):
        """circ(indx3 self, int l) -> indx3"""
        return _geom.indx3_circ(self, *args)

    def c_str(self, separator=" ", format="%i"):
        """
        c_str(indx3 self, char const * separator=" ", char const * format="%i") -> char const
        c_str(indx3 self, char const * separator=" ") -> char const
        c_str(indx3 self) -> char const *
        """
        return _geom.indx3_c_str(self, separator, format)

    def __contains__(self, *args):
        """__contains__(indx3 self, indx3 I) -> bool"""
        return _geom.indx3___contains__(self, *args)

    def __rmul__(self, *args):
        """__rmul__(indx3 self, int x) -> indx3"""
        return _geom.indx3___rmul__(self, *args)

    def __len__(self):
        """__len__(indx3 self) -> int const"""
        return _geom.indx3___len__(self)

    def __int__(self):
        """__int__(indx3 self) -> long"""
        return _geom.indx3___int__(self)

    def __getitem__(self, *args):
        """__getitem__(indx3 self, int i) -> int"""
        return _geom.indx3___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(indx3 self, int i, int x)"""
        return _geom.indx3___setitem__(self, *args)

    def __getslice__(self, *args):
        """__getslice__(indx3 self, long a, long b) -> PyObject *"""
        return _geom.indx3___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(indx3 self, long a, long b, PyObject * t)"""
        return _geom.indx3___setslice__(self, *args)

    def __str__(self):
        """__str__(indx3 self) -> PyObject *"""
        return _geom.indx3___str__(self)

    def __repr__(self):
        """__repr__(indx3 self) -> PyObject *"""
        return _geom.indx3___repr__(self)

    def __getstate__(self):
        """__getstate__(indx3 self) -> PyObject *"""
        return _geom.indx3___getstate__(self)

    def __C_setstate__(self, *args):
        """__C_setstate__(indx3 self, PyObject * t)"""
        return _geom.indx3___C_setstate__(self, *args)

    def __init__(self, *args): 
        """
        __init__(aiv::indx<(3)> self, int val=0) -> indx3
        __init__(aiv::indx<(3)> self) -> indx3
        __init__(aiv::indx<(3)> self, int const * Ap) -> indx3
        __init__(aiv::indx<(3)> self, PyObject * t) -> indx3
        """
        this = _geom.new_indx3(*args)
        try: self.this.append(this)
        except: self.this = this
    def __hash__(self):
        """__hash__(indx3 self) -> long"""
        return _geom.indx3___hash__(self)

    def py_debug_info(self, *args):
        """py_debug_info(indx3 self, aiv::debug_info & S)"""
        return _geom.indx3_py_debug_info(self, *args)

    def less(self, *args):
        """
        less(indx3 self, indx3 N) -> bool
        less(indx3 self, indx3 N, int const seq) -> bool
        """
        return _geom.indx3_less(self, *args)

    def next(self, *args):
        """
        next(indx3 self, indx3 finish) -> bool
        next(indx3 self, indx3 start, indx3 finish) -> bool
        next(indx3 self, indx3 start, indx3 finish, int const seq, int const direct=0) -> bool
        next(indx3 self, indx3 start, indx3 finish, int const seq) -> bool
        next(indx3 self, indx3 finish, int const seq, int const direct=0) -> bool
        next(indx3 self, indx3 finish, int const seq) -> bool
        """
        return _geom.indx3_next(self, *args)

    def z_next(self, *args):
        """
        z_next(indx3 self, int const rank) -> bool
        z_next(indx3 self, int const rank, int const seq) -> bool
        """
        return _geom.indx3_z_next(self, *args)

    __swig_destroy__ = _geom.delete_indx3
    __del__ = lambda self : None;
indx3_swigregister = _geom.indx3_swigregister
indx3_swigregister(indx3)

def Indx( *L ) : v = getattr( import_aivlib( 'indx%i'%len(L) ), 'indx%i'%len(L) )(); v[:] = tuple(L); return v
indx3.__rcmp__=lambda a,b : -b.__cmp__(a) 
def _indx3__xor__( a,b ) :  
  try : return Indx(*map( int.__mul__, tuple(a),tuple(b) ) )  
  except : return  Indx(*(tuple(a)[:b]+tuple(a)[b+1:]))
indx3.__xor__ = _indx3__xor__ 
indx3.__or__ =lambda a,b : Indx(*(tuple(a)+tuple(((b,),b)[b.__class__.__name__.startswith('indx')])))  
indx3.__ror__=lambda a,b : Indx(*(tuple(((b,),b)[b.__class__.__name__.startswith('indx')])+tuple(a)))  
indx3.__setstate__ = _setstate 

class vctr3(_object):
    """Proxy of C++ aiv::vctr<(3,double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vctr3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vctr3, name)
    def __lt__(self, *args):
        """
        __lt__(vctr3 self, vctr3 r) -> bool
        __lt__(vctr3 self, PyObject * t) -> bool
        """
        return _geom.vctr3___lt__(self, *args)

    def __le__(self, *args):
        """
        __le__(vctr3 self, vctr3 r) -> bool
        __le__(vctr3 self, PyObject * t) -> bool
        """
        return _geom.vctr3___le__(self, *args)

    def __gt__(self, *args):
        """
        __gt__(vctr3 self, vctr3 r) -> bool
        __gt__(vctr3 self, PyObject * t) -> bool
        """
        return _geom.vctr3___gt__(self, *args)

    def __ge__(self, *args):
        """
        __ge__(vctr3 self, vctr3 r) -> bool
        __ge__(vctr3 self, PyObject * t) -> bool
        """
        return _geom.vctr3___ge__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(vctr3 self, vctr3 r) -> bool
        __eq__(vctr3 self, PyObject * t) -> bool
        """
        return _geom.vctr3___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(vctr3 self, vctr3 r) -> bool
        __ne__(vctr3 self, PyObject * t) -> bool
        """
        return _geom.vctr3___ne__(self, *args)

    def __and__(self, *args):
        """
        __and__(vctr3 self, vctr3 r) -> double
        __and__(vctr3 self, PyObject * t) -> double
        """
        return _geom.vctr3___and__(self, *args)

    def __add__(self, *args):
        """
        __add__(vctr3 self, vctr3 r) -> vctr3
        __add__(vctr3 self, PyObject * t) -> vctr3
        """
        return _geom.vctr3___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(vctr3 self, vctr3 r) -> vctr3
        __sub__(vctr3 self, PyObject * t) -> vctr3
        """
        return _geom.vctr3___sub__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(vctr3 self, vctr3 r) -> vctr3
        __iadd__(vctr3 self, PyObject * t) -> vctr3
        """
        return _geom.vctr3___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(vctr3 self, vctr3 r) -> vctr3
        __isub__(vctr3 self, PyObject * t) -> vctr3
        """
        return _geom.vctr3___isub__(self, *args)

    def __lshift__(self, *args):
        """
        __lshift__(vctr3 self, vctr3 r) -> vctr3
        __lshift__(vctr3 self, PyObject * t) -> vctr3
        """
        return _geom.vctr3___lshift__(self, *args)

    def __rshift__(self, *args):
        """
        __rshift__(vctr3 self, vctr3 r) -> vctr3
        __rshift__(vctr3 self, PyObject * t) -> vctr3
        """
        return _geom.vctr3___rshift__(self, *args)

    def __ilshift__(self, *args):
        """
        __ilshift__(vctr3 self, vctr3 r) -> vctr3
        __ilshift__(vctr3 self, PyObject * t) -> vctr3
        """
        return _geom.vctr3___ilshift__(self, *args)

    def __irshift__(self, *args):
        """
        __irshift__(vctr3 self, vctr3 r) -> vctr3
        __irshift__(vctr3 self, PyObject * t) -> vctr3
        """
        return _geom.vctr3___irshift__(self, *args)

    def __xor__(self, *args):
        """
        __xor__(vctr3 self, vctr3 r) -> vctr3
        __xor__(vctr3 self, PyObject * t) -> vctr3
        """
        return _geom.vctr3___xor__(self, *args)

    def __ixor__(self, *args):
        """
        __ixor__(vctr3 self, vctr3 r) -> vctr3
        __ixor__(vctr3 self, PyObject * t) -> vctr3
        """
        return _geom.vctr3___ixor__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(vctr3 self, vctr3 r) -> double
        __mul__(vctr3 self, indx3 I) -> vctr3
        __mul__(vctr3 self, PyObject * t) -> vctr3
        __mul__(vctr3 self, double x) -> vctr3
        """
        return _geom.vctr3___mul__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(vctr3 self, indx3 I) -> vctr3
        __imul__(vctr3 self, PyObject * t) -> vctr3
        __imul__(vctr3 self, double x) -> vctr3
        """
        return _geom.vctr3___imul__(self, *args)

    def __div__(self, *args):
        """
        __div__(vctr3 self, vctr3 r) -> indx3
        __div__(vctr3 self, indx3 I) -> vctr3
        __div__(vctr3 self, PyObject * t) -> vctr3
        __div__(vctr3 self, double x) -> vctr3
        """
        return _geom.vctr3___div__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(vctr3 self, indx3 I) -> vctr3
        __idiv__(vctr3 self, PyObject * t) -> vctr3
        __idiv__(vctr3 self, double x) -> vctr3
        """
        return _geom.vctr3___idiv__(self, *args)

    def __neg__(self):
        """__neg__(vctr3 self) -> vctr3"""
        return _geom.vctr3___neg__(self)

    def abs(self):
        """abs(vctr3 self) -> double"""
        return _geom.vctr3_abs(self)

    def pow(self, *args):
        """
        pow(vctr3 self, int const n) -> vctr3
        pow(vctr3 self, double n) -> vctr3
        """
        return _geom.vctr3_pow(self, *args)

    def is_nan(self):
        """is_nan(vctr3 self) -> bool"""
        return _geom.vctr3_is_nan(self)

    def is_bad(self):
        """is_bad(vctr3 self) -> bool"""
        return _geom.vctr3_is_bad(self)

    def circ(self, *args):
        """circ(vctr3 self, int l) -> vctr3"""
        return _geom.vctr3_circ(self, *args)

    def c_str(self, separator=" ", format="%g"):
        """
        c_str(vctr3 self, char const * separator=" ", char const * format="%g") -> char const
        c_str(vctr3 self, char const * separator=" ") -> char const
        c_str(vctr3 self) -> char const *
        """
        return _geom.vctr3_c_str(self, separator, format)

    def __rmul__(self, *args):
        """
        __rmul__(vctr3 self, double x) -> vctr3
        __rmul__(vctr3 self, indx3 I) -> vctr3
        __rmul__(vctr3 self, PyObject * t) -> vctr3
        """
        return _geom.vctr3___rmul__(self, *args)

    def __len__(self):
        """__len__(vctr3 self) -> int const"""
        return _geom.vctr3___len__(self)

    def __getitem__(self, *args):
        """__getitem__(vctr3 self, int i) -> double"""
        return _geom.vctr3___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(vctr3 self, int i, double x)"""
        return _geom.vctr3___setitem__(self, *args)

    def __getslice__(self, *args):
        """__getslice__(vctr3 self, long a, long b) -> PyObject *"""
        return _geom.vctr3___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(vctr3 self, long a, long b, PyObject * t)"""
        return _geom.vctr3___setslice__(self, *args)

    def __str__(self):
        """__str__(vctr3 self) -> PyObject *"""
        return _geom.vctr3___str__(self)

    def __repr__(self):
        """__repr__(vctr3 self) -> PyObject *"""
        return _geom.vctr3___repr__(self)

    def __getstate__(self):
        """__getstate__(vctr3 self) -> PyObject *"""
        return _geom.vctr3___getstate__(self)

    def __C_setstate__(self, *args):
        """__C_setstate__(vctr3 self, PyObject * t)"""
        return _geom.vctr3___C_setstate__(self, *args)

    def __init__(self, *args): 
        """
        __init__(aiv::vctr<(3,double)> self, double val=0) -> vctr3
        __init__(aiv::vctr<(3,double)> self) -> vctr3
        __init__(aiv::vctr<(3,double)> self, double const * Ap) -> vctr3
        __init__(aiv::vctr<(3,double)> self, vctr3 v) -> vctr3
        __init__(aiv::vctr<(3,double)> self, PyObject * t) -> vctr3
        """
        this = _geom.new_vctr3(*args)
        try: self.this.append(this)
        except: self.this = this
    def __hash__(self):
        """__hash__(vctr3 self) -> long"""
        return _geom.vctr3___hash__(self)

    def py_debug_info(self, *args):
        """py_debug_info(vctr3 self, aiv::debug_info & S)"""
        return _geom.vctr3_py_debug_info(self, *args)

    __swig_destroy__ = _geom.delete_vctr3
    __del__ = lambda self : None;
vctr3_swigregister = _geom.vctr3_swigregister
vctr3_swigregister(vctr3)

vctr3.__mod__=lambda a,b : vctr3((a[1]*b[2]-a[2]*b[1],a[2]*b[0]-a[0]*b[2],a[0]*b[1]-a[1]*b[0])) 
def Vctr( *L ) : v = getattr( import_aivlib( 'vctr%i'%len(L) ), 'vctr%i'%len(L) )(); v[:] = tuple(L); return v
def _vctr3__xor__( a,b ) :  
  try : return Vctr(*map( float.__mul__, tuple(a),tuple(b) ) )  
  except : return  Vctr(*(tuple(a)[:b]+tuple(a)[b+1:]))
vctr3.__xor__ = _vctr3__xor__ 
vctr3.__or__ =lambda a,b : Vctr(*(tuple(a)+tuple(((b,),b)[b.__class__.__name__.startswith('vctr')])))  
vctr3.__ror__=lambda a,b : Vctr(*(tuple(((b,),b)[b.__class__.__name__.startswith('vctr')])+tuple(a)))  
vctr3.__setstate__ = _setstate 


def angle(*args):
  """
    angle(vctr1 a, vctr1 b, vctr1 c) -> double
    angle(vctr3 a, vctr3 b, vctr3 c) -> double
    """
  return _geom.angle(*args)
from aivlib.mystream import *; 
# This file is compatible with both classic and new-style classes.


